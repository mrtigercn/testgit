html_doc = """
<html><head><title>The Dormouse's story</title></head>
<body>
<p class="title"><b>The Dormouse's story</b></p>

<p class="story">Once upon a time there were three little sisters; and their names were
<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,
<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and
<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;
and they lived at the bottom of a well.</p>

<p class="story">...</p>
"""

from bs4 import BeautifulSoup
soup = BeautifulSoup(html_doc)

print(soup.prettify())

soup.title

soup.title.name

soup.title.string

soup.title.parent.name

soup.p

soup.p['class']

soup.a

soup.find_all('a')

soup.find(id="link3")

#One common task is extracting all the URLs found within a page¡¯s <a> tags:
for link in soup.find_all('a'):
    print(link.get('href'))

#Another common task is extracting all the text from a page:
print(soup.get_text())


from bs4 import BeautifulSoup

soup = BeautifulSoup(open("index.html"))
soup = BeautifulSoup("<html>data</html>")

BeautifulSoup("Sacr&eacute; bleu!")

soup = BeautifulSoup('<b class="boldest">Extremely bold</b>')
tag = soup.b
type(tag)

tag.name
tag.name = "blockquote"

tag['class']
tag.attrs

tag['class'] = 'verybold'
tag['id'] = 1
tag

del tag['class']
del tag['id']
tag

#HTML 4 defines a few attributes that can have multiple values. HTML 5 removes a couple of them, but defines a few more. 
#The most common multi-valued attribute is class (that is, a tag can have more than one CSS class). 
#Others include rel, rev, accept-charset, headers, and accesskey. 
#Beautiful Soup presents the value(s) of a multi-valued attribute as a list:
css_soup = BeautifulSoup('<p class="body strikeout"></p>')
css_soup.p['class']

id_soup = BeautifulSoup('<p id="my id"></p>')
id_soup.p['id']
#??id_soup.p['id']=['my','id1']
#??print(id_soup.p)
#??id_soup.p['id']

rel_soup = BeautifulSoup('<p>Back to the <a rel="index">homepage</a></p>')
rel_soup.a['rel']
rel_soup.a['rel'] = ['index', 'contents']
print(rel_soup.p)
rel_soup.a['rel']

