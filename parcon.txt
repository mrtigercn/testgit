from parcon import *

parser = "(" + ZeroOrMore(SignificantLiteral("a") | SignificantLiteral("b")) + ")"
parser.parse_string("(abbaabaab)")

parser.parse_string("(a)")
parser.parse_string("")
parser.parse_string("(a")
parser.parse_string("(ababacababa)")



from parcon import number, Forward, InfixExpr
import operator

expr = Forward()
term = number[float] | "(" + expr + ")"
term = InfixExpr(term, [("*", operator.mul), ("/", operator.truediv)])
term = InfixExpr(term, [("+", operator.add), ("-", operator.sub)])
expr << term(name="expr")



expr = Forward()
term = number[float] | "(" + expr + ")"
term = InfixExpr(term, [("*", operator.mul), ("/", operator.truediv)])
term = InfixExpr(term, [("+", operator.add), ("-", operator.sub)])
expr << term(name="expr")

expr.parse_string("1+2") # prints 3
expr.parse_string("1+2+3") # prints 6
expr.parse_string("1+2+3+4") # prints 10
expr.parse_string("3*4") # prints 12
expr.parse_string("5+3*4") # prints 17
expr.parse_string("(5+3)*4") # prints 32
expr.parse_string("10/4") # prints 2.5

expr.draw_productions_to_png({}, "syntax-expr.png")

